/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

&lt { quick_tap_ms = <200>; };

/ {
    chosen { zmk,matrix_transform = &ortho_transform; };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NAV_L NUM_L>;
            then-layer = <SYM_L>;
        };
    };

    combos {
        compatible = "zmk,combos";

        rbkt {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
        };

        lbkt {
            bindings = <&kp LBKT>;
            key-positions = <4 3>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
        };

        bspc {
            bindings = <&kp BSPC>;
            key-positions = <20 21>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <25 26>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <33 34>;
        };
    };

    behaviors {
        nk: no_so_sticky_key {
            compatible = "zmk,behavior-hold-tap";
            label = "NO_SO_STICKY_KEY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
&kp Q  &kp W  &kp E     &kp R  &kp T      &kp GRAVE             &kp BSPC         &kp Y  &kp U      &kp I      &kp O    &kp P
&kp A  &kp S  &kp D     &kp F  &kp G      &mt LCTRL ESC         &kp SQT          &kp H  &kp J      &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C     &kp V  &kp B      &kp BSLH              &kp RET          &kp N  &kp M      &kp COMMA  &kp DOT  &kp FSLH
              &kp LCMD  &mo 1  &kp SPACE  &none          &none  &sk RIGHT_SHIFT  &mo 2  &kp RCTRL
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&kp ESC                    &none                  &none              &none            &none         &none                 &none   &kp TAB   &none      &none      &none      &kp DEL
&nk LEFT_SHIFT LEFT_SHIFT  &nk LEFT_WIN LEFT_WIN  &nk LEFT_ALT LALT  &nk LCTRL LCTRL  &none         &none                 &none   &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &kp BACKSPACE
&bt BT_CLR                 &bt BT_SEL 0           &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4          &none   &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &trans
                                                  &trans             &trans           &trans        &trans        &trans  &trans  &trans    &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8  &kp N9  &kp RBKT          &kp C_PREV  &trans   &trans  &trans  &trans  &trans
&trans  &kp MINUS  &kp N4  &kp N5  &kp N6  &kp EQUAL         &kp C_NEXT  &trans   &trans  &trans  &trans  &trans
&trans  &kp GRAVE  &kp N1  &kp N2  &kp N3  &kp BSLH          &trans      &trans   &trans  &trans  &trans  &trans
                   &trans  &kp N0  &trans  &none      &none  &kp ESC     &kp DEL  &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&trans  &kp LBRC   &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp RBRC              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp COLON  &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &kp PLUS              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp TILDE  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(BSLH)          &trans  &trans  &trans  &trans  &trans  &trans
                   &trans      &kp LS(N0)  &trans      &trans        &trans  &trans  &trans  &trans
            >;
        };
    };
};
